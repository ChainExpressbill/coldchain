// Code generated by entc, DO NOT EDIT.

package order

import (
	"time"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrderer holds the string denoting the orderer field in the database.
	FieldOrderer = "orderer"
	// FieldReceiver holds the string denoting the receiver field in the database.
	FieldReceiver = "receiver"
	// FieldDrugName holds the string denoting the drug_name field in the database.
	FieldDrugName = "drug_name"
	// FieldDrugStandard holds the string denoting the drug_standard field in the database.
	FieldDrugStandard = "drug_standard"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldRegisterName holds the string denoting the register_name field in the database.
	FieldRegisterName = "register_name"
	// FieldStorageCondition holds the string denoting the storage_condition field in the database.
	FieldStorageCondition = "storage_condition"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldUpdated holds the string denoting the updated field in the database.
	FieldUpdated = "updated"
	// EdgeManager holds the string denoting the manager edge name in mutations.
	EdgeManager = "manager"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// ManagerTable is the table that holds the manager relation/edge.
	ManagerTable = "orders"
	// ManagerInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	ManagerInverseTable = "accounts"
	// ManagerColumn is the table column denoting the manager relation/edge.
	ManagerColumn = "account_orders"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldOrderer,
	FieldReceiver,
	FieldDrugName,
	FieldDrugStandard,
	FieldQuantity,
	FieldRegisterName,
	FieldStorageCondition,
	FieldCreated,
	FieldUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "orders"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"account_orders",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated time.Time
	// DefaultUpdated holds the default value on creation for the "updated" field.
	DefaultUpdated time.Time
)
