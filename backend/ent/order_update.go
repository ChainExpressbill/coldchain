// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ChainExpressbill/coldchain/ent/account"
	"github.com/ChainExpressbill/coldchain/ent/order"
	"github.com/ChainExpressbill/coldchain/ent/predicate"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetOrderer sets the "orderer" field.
func (ou *OrderUpdate) SetOrderer(s string) *OrderUpdate {
	ou.mutation.SetOrderer(s)
	return ou
}

// SetReceiver sets the "receiver" field.
func (ou *OrderUpdate) SetReceiver(s string) *OrderUpdate {
	ou.mutation.SetReceiver(s)
	return ou
}

// SetDrugName sets the "drug_name" field.
func (ou *OrderUpdate) SetDrugName(s string) *OrderUpdate {
	ou.mutation.SetDrugName(s)
	return ou
}

// SetDrugStandard sets the "drug_standard" field.
func (ou *OrderUpdate) SetDrugStandard(s string) *OrderUpdate {
	ou.mutation.SetDrugStandard(s)
	return ou
}

// SetQuantity sets the "quantity" field.
func (ou *OrderUpdate) SetQuantity(i int) *OrderUpdate {
	ou.mutation.ResetQuantity()
	ou.mutation.SetQuantity(i)
	return ou
}

// AddQuantity adds i to the "quantity" field.
func (ou *OrderUpdate) AddQuantity(i int) *OrderUpdate {
	ou.mutation.AddQuantity(i)
	return ou
}

// SetRegisterName sets the "register_name" field.
func (ou *OrderUpdate) SetRegisterName(s string) *OrderUpdate {
	ou.mutation.SetRegisterName(s)
	return ou
}

// SetStorageCondition sets the "storage_condition" field.
func (ou *OrderUpdate) SetStorageCondition(s string) *OrderUpdate {
	ou.mutation.SetStorageCondition(s)
	return ou
}

// SetDeliveryDriverName sets the "delivery_driver_name" field.
func (ou *OrderUpdate) SetDeliveryDriverName(s string) *OrderUpdate {
	ou.mutation.SetDeliveryDriverName(s)
	return ou
}

// SetNillableDeliveryDriverName sets the "delivery_driver_name" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveryDriverName(s *string) *OrderUpdate {
	if s != nil {
		ou.SetDeliveryDriverName(*s)
	}
	return ou
}

// SetDeliveryDriverTelNo sets the "delivery_driver_tel_no" field.
func (ou *OrderUpdate) SetDeliveryDriverTelNo(s string) *OrderUpdate {
	ou.mutation.SetDeliveryDriverTelNo(s)
	return ou
}

// SetNillableDeliveryDriverTelNo sets the "delivery_driver_tel_no" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveryDriverTelNo(s *string) *OrderUpdate {
	if s != nil {
		ou.SetDeliveryDriverTelNo(*s)
	}
	return ou
}

// SetMemo sets the "memo" field.
func (ou *OrderUpdate) SetMemo(s string) *OrderUpdate {
	ou.mutation.SetMemo(s)
	return ou
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableMemo(s *string) *OrderUpdate {
	if s != nil {
		ou.SetMemo(*s)
	}
	return ou
}

// ClearMemo clears the value of the "memo" field.
func (ou *OrderUpdate) ClearMemo() *OrderUpdate {
	ou.mutation.ClearMemo()
	return ou
}

// SetUpdatedAt sets the "updatedAt" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetManagerID sets the "manager" edge to the Account entity by ID.
func (ou *OrderUpdate) SetManagerID(id string) *OrderUpdate {
	ou.mutation.SetManagerID(id)
	return ou
}

// SetManager sets the "manager" edge to the Account entity.
func (ou *OrderUpdate) SetManager(a *Account) *OrderUpdate {
	return ou.SetManagerID(a.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearManager clears the "manager" edge to the Account entity.
func (ou *OrderUpdate) ClearManager() *OrderUpdate {
	ou.mutation.ClearManager()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ou.defaults()
	if len(ou.hooks) == 0 {
		if err = ou.check(); err != nil {
			return 0, err
		}
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ou.check(); err != nil {
				return 0, err
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Orderer(); ok {
		if err := order.OrdererValidator(v); err != nil {
			return &ValidationError{Name: "orderer", err: fmt.Errorf(`ent: validator failed for field "Order.orderer": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Receiver(); ok {
		if err := order.ReceiverValidator(v); err != nil {
			return &ValidationError{Name: "receiver", err: fmt.Errorf(`ent: validator failed for field "Order.receiver": %w`, err)}
		}
	}
	if v, ok := ou.mutation.DrugName(); ok {
		if err := order.DrugNameValidator(v); err != nil {
			return &ValidationError{Name: "drug_name", err: fmt.Errorf(`ent: validator failed for field "Order.drug_name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.DrugStandard(); ok {
		if err := order.DrugStandardValidator(v); err != nil {
			return &ValidationError{Name: "drug_standard", err: fmt.Errorf(`ent: validator failed for field "Order.drug_standard": %w`, err)}
		}
	}
	if v, ok := ou.mutation.StorageCondition(); ok {
		if err := order.StorageConditionValidator(v); err != nil {
			return &ValidationError{Name: "storage_condition", err: fmt.Errorf(`ent: validator failed for field "Order.storage_condition": %w`, err)}
		}
	}
	if v, ok := ou.mutation.DeliveryDriverName(); ok {
		if err := order.DeliveryDriverNameValidator(v); err != nil {
			return &ValidationError{Name: "delivery_driver_name", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_driver_name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.DeliveryDriverTelNo(); ok {
		if err := order.DeliveryDriverTelNoValidator(v); err != nil {
			return &ValidationError{Name: "delivery_driver_tel_no", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_driver_tel_no": %w`, err)}
		}
	}
	if _, ok := ou.mutation.ManagerID(); ou.mutation.ManagerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.manager"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Orderer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldOrderer,
		})
	}
	if value, ok := ou.mutation.Receiver(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldReceiver,
		})
	}
	if value, ok := ou.mutation.DrugName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldDrugName,
		})
	}
	if value, ok := ou.mutation.DrugStandard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldDrugStandard,
		})
	}
	if value, ok := ou.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldQuantity,
		})
	}
	if value, ok := ou.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldQuantity,
		})
	}
	if value, ok := ou.mutation.RegisterName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRegisterName,
		})
	}
	if value, ok := ou.mutation.StorageCondition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldStorageCondition,
		})
	}
	if value, ok := ou.mutation.DeliveryDriverName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldDeliveryDriverName,
		})
	}
	if value, ok := ou.mutation.DeliveryDriverTelNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldDeliveryDriverTelNo,
		})
	}
	if value, ok := ou.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldMemo,
		})
	}
	if ou.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: order.FieldMemo,
		})
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
	}
	if ou.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ManagerTable,
			Columns: []string{order.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ManagerTable,
			Columns: []string{order.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetOrderer sets the "orderer" field.
func (ouo *OrderUpdateOne) SetOrderer(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderer(s)
	return ouo
}

// SetReceiver sets the "receiver" field.
func (ouo *OrderUpdateOne) SetReceiver(s string) *OrderUpdateOne {
	ouo.mutation.SetReceiver(s)
	return ouo
}

// SetDrugName sets the "drug_name" field.
func (ouo *OrderUpdateOne) SetDrugName(s string) *OrderUpdateOne {
	ouo.mutation.SetDrugName(s)
	return ouo
}

// SetDrugStandard sets the "drug_standard" field.
func (ouo *OrderUpdateOne) SetDrugStandard(s string) *OrderUpdateOne {
	ouo.mutation.SetDrugStandard(s)
	return ouo
}

// SetQuantity sets the "quantity" field.
func (ouo *OrderUpdateOne) SetQuantity(i int) *OrderUpdateOne {
	ouo.mutation.ResetQuantity()
	ouo.mutation.SetQuantity(i)
	return ouo
}

// AddQuantity adds i to the "quantity" field.
func (ouo *OrderUpdateOne) AddQuantity(i int) *OrderUpdateOne {
	ouo.mutation.AddQuantity(i)
	return ouo
}

// SetRegisterName sets the "register_name" field.
func (ouo *OrderUpdateOne) SetRegisterName(s string) *OrderUpdateOne {
	ouo.mutation.SetRegisterName(s)
	return ouo
}

// SetStorageCondition sets the "storage_condition" field.
func (ouo *OrderUpdateOne) SetStorageCondition(s string) *OrderUpdateOne {
	ouo.mutation.SetStorageCondition(s)
	return ouo
}

// SetDeliveryDriverName sets the "delivery_driver_name" field.
func (ouo *OrderUpdateOne) SetDeliveryDriverName(s string) *OrderUpdateOne {
	ouo.mutation.SetDeliveryDriverName(s)
	return ouo
}

// SetNillableDeliveryDriverName sets the "delivery_driver_name" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveryDriverName(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetDeliveryDriverName(*s)
	}
	return ouo
}

// SetDeliveryDriverTelNo sets the "delivery_driver_tel_no" field.
func (ouo *OrderUpdateOne) SetDeliveryDriverTelNo(s string) *OrderUpdateOne {
	ouo.mutation.SetDeliveryDriverTelNo(s)
	return ouo
}

// SetNillableDeliveryDriverTelNo sets the "delivery_driver_tel_no" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveryDriverTelNo(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetDeliveryDriverTelNo(*s)
	}
	return ouo
}

// SetMemo sets the "memo" field.
func (ouo *OrderUpdateOne) SetMemo(s string) *OrderUpdateOne {
	ouo.mutation.SetMemo(s)
	return ouo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMemo(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetMemo(*s)
	}
	return ouo
}

// ClearMemo clears the value of the "memo" field.
func (ouo *OrderUpdateOne) ClearMemo() *OrderUpdateOne {
	ouo.mutation.ClearMemo()
	return ouo
}

// SetUpdatedAt sets the "updatedAt" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetManagerID sets the "manager" edge to the Account entity by ID.
func (ouo *OrderUpdateOne) SetManagerID(id string) *OrderUpdateOne {
	ouo.mutation.SetManagerID(id)
	return ouo
}

// SetManager sets the "manager" edge to the Account entity.
func (ouo *OrderUpdateOne) SetManager(a *Account) *OrderUpdateOne {
	return ouo.SetManagerID(a.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearManager clears the "manager" edge to the Account entity.
func (ouo *OrderUpdateOne) ClearManager() *OrderUpdateOne {
	ouo.mutation.ClearManager()
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	ouo.defaults()
	if len(ouo.hooks) == 0 {
		if err = ouo.check(); err != nil {
			return nil, err
		}
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouo.check(); err != nil {
				return nil, err
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Orderer(); ok {
		if err := order.OrdererValidator(v); err != nil {
			return &ValidationError{Name: "orderer", err: fmt.Errorf(`ent: validator failed for field "Order.orderer": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Receiver(); ok {
		if err := order.ReceiverValidator(v); err != nil {
			return &ValidationError{Name: "receiver", err: fmt.Errorf(`ent: validator failed for field "Order.receiver": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.DrugName(); ok {
		if err := order.DrugNameValidator(v); err != nil {
			return &ValidationError{Name: "drug_name", err: fmt.Errorf(`ent: validator failed for field "Order.drug_name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.DrugStandard(); ok {
		if err := order.DrugStandardValidator(v); err != nil {
			return &ValidationError{Name: "drug_standard", err: fmt.Errorf(`ent: validator failed for field "Order.drug_standard": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.StorageCondition(); ok {
		if err := order.StorageConditionValidator(v); err != nil {
			return &ValidationError{Name: "storage_condition", err: fmt.Errorf(`ent: validator failed for field "Order.storage_condition": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.DeliveryDriverName(); ok {
		if err := order.DeliveryDriverNameValidator(v); err != nil {
			return &ValidationError{Name: "delivery_driver_name", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_driver_name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.DeliveryDriverTelNo(); ok {
		if err := order.DeliveryDriverTelNoValidator(v); err != nil {
			return &ValidationError{Name: "delivery_driver_tel_no", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_driver_tel_no": %w`, err)}
		}
	}
	if _, ok := ouo.mutation.ManagerID(); ouo.mutation.ManagerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.manager"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Orderer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldOrderer,
		})
	}
	if value, ok := ouo.mutation.Receiver(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldReceiver,
		})
	}
	if value, ok := ouo.mutation.DrugName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldDrugName,
		})
	}
	if value, ok := ouo.mutation.DrugStandard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldDrugStandard,
		})
	}
	if value, ok := ouo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldQuantity,
		})
	}
	if value, ok := ouo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldQuantity,
		})
	}
	if value, ok := ouo.mutation.RegisterName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRegisterName,
		})
	}
	if value, ok := ouo.mutation.StorageCondition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldStorageCondition,
		})
	}
	if value, ok := ouo.mutation.DeliveryDriverName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldDeliveryDriverName,
		})
	}
	if value, ok := ouo.mutation.DeliveryDriverTelNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldDeliveryDriverTelNo,
		})
	}
	if value, ok := ouo.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldMemo,
		})
	}
	if ouo.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: order.FieldMemo,
		})
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
	}
	if ouo.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ManagerTable,
			Columns: []string{order.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ManagerTable,
			Columns: []string{order.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
